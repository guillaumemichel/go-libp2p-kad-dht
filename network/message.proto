syntax = "proto3";

option go_package = "./pb";

message Peer {
  enum ConnectionType {
    // sender does not have a connection to peer, and no extra information
    // (default)
    NOT_CONNECTED = 0;

    // sender has a live connection to peer
    CONNECTED = 1;

    // sender recently connected to peer
    CAN_CONNECT = 2;

    // sender recently tried to connect to peer repeatedly but failed to
    // connect
    // ("try" here is loose, but this should signal "made strong effort,
    // failed")
    CANNOT_CONNECT = 3;
  }

  string PeerId = 1; // peer.ID
  repeated bytes addrs = 2;
  ConnectionType connectionType = 3;
}

message DhtFindPeerRequest {
  bytes KadId = 1; // KadId
}

message DhtFindPeerResponse { repeated Peer Peers = 1; }

message EncPeerId {
  bytes EncPeerIdFormatVarint = 1;
  bytes Nonce = 2;
  bytes Payload = 3;
}

message DhtProvideRequest {
  bytes ID = 1;
  bytes ServerKey = 2;
  EncPeerId EncPeerId = 3;
  bytes Signature = 4;
}

message DhtProvideResponse {
  enum status {
    OK = 0;
    ERROR = 1;
  }
  status Status = 1;
}

message DhtLookupRequest { bytes Prefix = 1; }

message DhtLookupResponse {

  message ProviderRecord {
    bytes FormatVarint = 1;
    EncPeerId EncPeerId = 2;
    bytes ServerNonce = 3;
    bytes EncMetadata = 4;
  }
  message AggregatedProviderRecords {
    bytes id = 1;
    repeated ProviderRecord ProviderRecords = 2;
  }

  bytes DhtLookupResponseFormatVarint = 1;
  bytes Flag = 2;
  repeated Peer Peers = 3;
  repeated AggregatedProviderRecords ProviderRecords = 4;
}

message DhtMessage {
  oneof MessageType {
    DhtFindPeerRequest FindPeerRequestType = 1;
    DhtFindPeerResponse FindPeerResponseType = 2;
    DhtProvideRequest ProvideRequestType = 3;
    DhtProvideResponse ProvideResponseType = 4;
    DhtLookupRequest LookupRequestType = 5;
    DhtLookupResponse LookupResponseType = 6;
  }
}
